@page "/ViewTasks"
@inject ITaskService TaskServ
@inject IAuthProvider AuthProvider
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage BrowserStorage
@using TaskManagerGUI.Shared.Generic;
@using DTO;

<PaginatedListViewerWithTask T="TaskTransferModal" PageSize="PageSize" GetTotalPage="GetTotalPageCount" GetPage="GetPageTasks">
    <ChildFragment>
        <TaskViewer Value="@context" />
    </ChildFragment>
</PaginatedListViewerWithTask>


<Loader Show="@show_load" />

@code {
    private bool show_load;

    const int PageSize = 5;


    protected override async Task OnAfterRenderAsync(bool first)
    {
        await base.OnAfterRenderAsync(first);
        if(first){
            show_load = true;
            await InvokeAsync(StateHasChanged);
            await AuthProvider.CheckLocalStorage(BrowserStorage);
            if (AuthProvider.UserInfo == null)
            {
                show_load = false;
                await InvokeAsync(StateHasChanged);
                return;
            }
            await InvokeAsync(StateHasChanged);
            show_load = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task<int> GetTotalPageCount()
    {
        if (AuthProvider.UserInfo == null)
            return 0;

        var items = await TaskServ.GetTasks(AuthProvider.UserInfo.UserID);
        return (int)Math.Ceiling(((double)(items.Count) / PageSize));
    }

    private async Task<List<TaskTransferModal>> GetPageTasks(int page)
    {
        if (AuthProvider.UserInfo == null)
            return new List<TaskTransferModal>();
        return (await TaskServ.GetTasks(AuthProvider.UserInfo.UserID)).Skip((page - 1) * PageSize).Take(PageSize).ToList();
    }

}
