@inject IAuthProvider iauth
@inject NavigationManager navMan
@layout LoginLayout
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage BrowserStorage
@page "/Login"


<div class="login-container">
    <div class="login-item" style="text-align:center;">
        <h3>Log in</h3>
    </div>
    <div class="login-item">
        <h6>Username</h6>
        <input type="text" @bind=Username style="width:100%;" />
    </div>
    
    <div class="login-item" style="display: flex;flex-wrap: wrap; justify-content: space-between;">
        <h6>Password</h6> <div><h10>Show Password</h10><input type="checkbox" @bind=show_pass /></div>
        <input type="@inputType" @bind=Password style="width:100%;"/>
        <a class="forgot-password-href" @onclick=ForgotPassword>Forgot Password</a>
    </div>

    <div class="login-item" style="justify-content:end;display:flex;justify-content: flex-end;">
        <button class="btn btn-outline-primary" @onclick="@CheckAuth">
            Log in
        </button>    
    </div>

    <hr style="width:85%;margin-left:auto;margin-right:auto;"/>


    <div class="login-item" style="display: flex;flex-wrap: wrap; justify-content: center;">
        <h3 style="width:100%;text-align:center;">Don't have an account?</h3>
        <br/>
        <button class="btn btn-outline-primary" @onclick="@CreateAccount">
            Create one now
        </button>
    </div>

</div>

<ErrorMessageHandler @ref=Handler />

<Loader Show="Loading" />

@code {
    ErrorMessageHandler Handler { get; set; }

    private string ErrorMessage;
    private bool Loading = false;
    private bool HasAuthed = false;

    private string inputType => show_pass ? "text" : "password";

    private bool show_pass = false;

    private string Username = "";
    private string Password = "";

    public async Task CheckAuth()
    {
        Loading = true;
        if (string.IsNullOrEmpty(Username))
        {
            Handler.ShowMessage("Username can not be blank");
            Loading = false;
            return;
        }
        if (string.IsNullOrEmpty(Password))
        {
            Handler.ShowMessage("Password can not be blank");
            Loading = false;
            return;
        }
        try
        {
            HasAuthed = await iauth.CheckAuth(Username, Password, BrowserStorage);
        }
        catch(Exception ex)
        {
            Handler.ShowMessage(ex.Message);
            Loading = false;
            return;
        }

        Loading = false;
        if (HasAuthed)
        {
            navMan.NavigateTo("/");
        }
        else
        {
            Handler.ShowMessage("Invalid username or password");
            InvokeAsync(StateHasChanged);
        }
    }

    public void ForgotPassword()
    {
        navMan.NavigateTo("/ForgotPassword");
    }
    

    public void CreateAccount()
    {
        navMan.NavigateTo("/CreateAccount");
    }
}
