@inject IOpenAIService openAI
@inject IJSRuntime js
<div class="task-form">
	<EditForm Model="InitialValue" OnValidSubmit="Submit">
		<DataAnnotationsValidator/>
		<ValidationSummary />


		<div class="form-group">
			<div class="individual-item">
				<h4>Title</h4>
			</div>
			<div class="individual-item">
				<input type="text" placeholder="Enter Title Here" @bind=InitialValue.Title />
			</div>
		</div>

		<div class="form-group">
			<div class="individual-item">
				<h4>Description</h4>
				<button @onclick=GenerateDescription type="button" class="btn btn-outline-primary">Generate Description</button>
			</div>
			<div class="individual-item">
				<textarea placeholder="Enter Description Here" @bind=InitialValue.Description style="width:100%;background-color: var(--secondary-color) !important;color:var(--secondary-background-color)" />
			</div>
		</div>

		<div class="form-group">
			<div class="individual-item">
				<h4>Start Date</h4>
			</div>
			<CenterHorizontally>
				<div class="individual-item" style="width:200px;">
					<InputDateTime @bind-Value="InitialValue.recurrenceOptions.FirstOccurrance" />
				</div>
			</CenterHorizontally>
		</div>

		<TaskRecurrenceInput @bind-Value="InitialValue.recurrenceOptions"></TaskRecurrenceInput>
	
		<div class="form-group">
			<div class="individual-item">
				<button type="submit" class="btn btn-outline-primary">Enter</button>
			</div>
		</div>
</EditForm>
</div>

<Loader Show="show_load" />
<ErrorMessageHandler @ref=Handler />



@code {
	ErrorMessageHandler Handler;


	bool show_load = false;
	[Parameter] public EventCallback<DTO.TaskTransferModal> OnSubmit { get; set; }

	[Parameter]
	public DTO.TaskTransferModal InitialValue { get; set; } = new DTO.TaskTransferModal()
		{
			recurrenceOptions = new DTO.TaskRecurrenceTransferModal()
			{
				FirstOccurrance = DateTime.Now
			}
		};

	private async Task Submit()
	{
		await OnSubmit.InvokeAsync(InitialValue);
	}

	private async Task GenerateDescription()
	{
		if (string.IsNullOrWhiteSpace(InitialValue.Title))
		{
			await js.InvokeVoidAsync("alert", "Task Title can not be empty");
			return;
		}
		show_load = true;
		await InvokeAsync(StateHasChanged);
		try
		{
			var str = await openAI.GetDescriptionForTaskByTitle(InitialValue.Title);

			InitialValue.Description = str;
		}catch(Exception ex)
		{
			Handler.ShowMessage(ex.Message);
		}


		show_load = false;
		await InvokeAsync(StateHasChanged);
	}

}
