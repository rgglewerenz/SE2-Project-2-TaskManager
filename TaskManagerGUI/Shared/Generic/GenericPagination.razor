<nav>
    <ul class="pagination justify-content-center">
        @if(links != null)
        {
            @foreach(var link in links)
            {
                <li @onclick="@(() => SelectPageInteral(link))"
                    style="cursor:pointer"
                    class="page-item @(link.Enabled ? null : "disabled") @(link.Active ?  "active" : null) fit-box">
                    <button class="page-link no-color-on-active" href="#">@link.Text</button>
                </li>
            }
            
        }
    </ul>

</nav>

@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalAmountPages { get; set; } = 0;
    [Parameter] public int Radius { get; set; } = 0;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }

    List<LinkModel> links;

    private async Task SelectPageInteral(LinkModel link)
    {
        if(link.Page == CurrentPage)
        {
            return;
        }
        if (!link.Enabled)
        {
            return;
        }
        CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }

    protected override void OnParametersSet()
    {
        LoadPages();
        base.OnParametersSet();
    }

    private void LoadPages()
    {
        if(TotalAmountPages < 2)
        {
            return;
        }

        links = new List<LinkModel>();

        var isPreviousPageLinkEnabled = CurrentPage != 1;
        var previousPage = CurrentPage - 1;
        bool enableStart = false;
        if (CurrentPage > 1)
            enableStart = true;

        links.Add(new LinkModel(1, enableStart, "<<"));
        links.Add(new LinkModel(previousPage, isPreviousPageLinkEnabled, "<"));

        for(int i = 1; i <= TotalAmountPages; i++)
        {
            if(i >= CurrentPage - Radius && i < CurrentPage + Radius)
            {
                links.Add(new LinkModel(i) { Active = CurrentPage == i });
            }
        }

        var isNextPageLinkEnabled = CurrentPage != TotalAmountPages;
        var nextPage = CurrentPage + 1;
        links.Add(new LinkModel(nextPage, isNextPageLinkEnabled, ">"));
        bool enableEnd = false;
        if (CurrentPage < TotalAmountPages)
            enableEnd = true;
        links.Add(new LinkModel(TotalAmountPages, enableEnd, ">>"));
    }


    class LinkModel
    {
        public LinkModel(int page) : this(page, true)
        {
            Page = page;
        }

        public LinkModel(int page, bool enabled) : this(page, enabled, page.ToString())
        {
            Page = page;
            Enabled = enabled;
        }

        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }


        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; }
        public bool Active { get; set; }
    }


}
